name: Auto Version Increment

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'VERSION'  # Ignore pushes that only change the VERSION file to avoid infinite loops

# Skip this workflow if the commit message contains "Bump version to" (used by the release workflow)
# This helps avoid conflicts between the auto-version and release workflows
jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Need at least 2 commits to get the commit message
      
      - name: Check commit message
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"Bump version to"* ]]; then
            echo "Commit message contains 'Bump version to', skipping auto-version workflow"
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "Commit message does not contain 'Bump version to', proceeding with auto-version workflow"
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  increment-version:
    needs: check-commit-message
    if: ${{ needs.check-commit-message.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for pushing changes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      
      - name: Read current version
        id: version
        run: |
          VERSION=$(cat VERSION)
          echo "Current version: $VERSION"
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Increment version
        id: increment
        run: |
          # Parse the version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ steps.version.outputs.current_version }}"
          
          # Increment the patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update VERSION file
        run: |
          echo "${{ steps.increment.outputs.new_version }}" > VERSION
      
      - name: Commit and push changes
        run: |
          # Fetch the latest changes first
          git fetch origin main
          
          # Stage the VERSION file
          git add VERSION
          
          # Commit and push without rebasing
          git commit -m "Auto increment version to ${{ steps.increment.outputs.new_version }}"
          git push origin HEAD:main
